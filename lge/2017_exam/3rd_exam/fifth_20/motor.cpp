#include <iostream>
#include "verify.h"

/* [작성 내용] */
/* 1. 데이터 오류에 대한 동작을 확인 하기 위한 테스트 케이스를 아래 배열에 추가하시오 개수는 상관 없음 */
/* 2. 기본 테스트 케이스 구조 : 하나의 테스트 케이스는 4개의 연속된 패킷에 의해 구성 됨*/
/* 3. 테스트 케이스 배열 구조 : {
 * {{첫번째 패킷},{두번째 패킷},{세번째 패킷},{네번째 패킷}},  // 첫번째 테스트 케이스
 * {{첫번째 패킷},{두번째 패킷},{세번째 패킷},{네번째 패킷}},  // 두번째 테스트 케이스
 * }
 * */
/* 4. 각 패킷의 구조 : {좌측모터  rpm, 우측모터  rpm,  체크섬 }*/

#if 0
1. 좌/우 둘 중 하나라도 모터회전수가 3000을 초과하는 경우
2.1 이전 모터회전수 보다 1000을 초과해서 빨라지는 경우
2.2 이전 모터회전수 보다 1000을 초과해서 느려지는 경우
   (이전 좌측과 현재 좌측비교, 이전 우측과 현재 우측비교)
3. 좌측과 우측회전수의 차이가 500을 초과하는 경우
4. 체크섬 값이 잘못된 경우
   (체크섬은 해당 패킷 좌/우 모터회전수를 exclusive-OR 연산)
   (좌우회전수가 1850, 1220 인 경우 체크섬은 0x3FE)
#endif

PACKET tcase[][4] = {
	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 3000,2950,0x3E } }, // 예시 - 오류가 없는 케이스.
	// TODO : 테스트 케이스(입력)을 작성하시오.

	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 3100,2950,0x79a } }, // 1_L
	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 3000,3100,0x7a4 } }, // 1_R

	{ { 1850,1620,0x16E },{ 3000,2600,0x190 },{ 2000,1870,0x9e },{ 2950,2800,0x176 } }, // 2.1_L
	{ { 1850,1620,0x16E },{ 2600,3000,0x190 },{ 2000,1870,0x9e },{ 2950,2800,0x176 } }, // 2.1_R

	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 1900,2350,0xe42 } }, // 2.2_L
	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 2100,1750,0xee2 } }, // 2.2_R

	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 3000,2400,0x2d8 } }, // 3_L
	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 2450,3000,0x22a } }, // 3_R

	{ { 1850,1620,0x16E },{ 2000,1870,0x9E },{ 2950,2800,0x176 },{ 3000,2950,0x3Ea } }, // 4
};

extern int safeDrive(PACKET *p);

using namespace std;

int main(void)
{
	int i, j;

	for (i = 0; i < sizeof(tcase)/sizeof(tcase[0]); i++)
	{
		initializeDrive();  // Drive 초기화를 위한 코드. 각 TC 마다 수행된다.

		cout << "[" << i << "]";
		for (j = 0; j<4; j++)
		{
			cout << (safeDrive(&tcase[i][j]) ? "FAILED" : "SUCCESS") << " ";
		}
		cout << endl;
	}
	return 0;
}


